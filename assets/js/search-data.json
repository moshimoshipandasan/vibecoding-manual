{"0": {
    "doc": "最初のプロジェクト",
    "title": "🎯 VSCodeで最初のプロジェクトを作成",
    "content": "VSCodeを使って、Vibecodingプロジェクトを作成し、開発を始めましょう。 . ",
    "url": "/vibecoding-manual/getting-started/first-project/#-vscode%E3%81%A7%E6%9C%80%E5%88%9D%E3%81%AE%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92%E4%BD%9C%E6%88%90",
    
    "relUrl": "/getting-started/first-project/#-vscodeで最初のプロジェクトを作成"
  },"1": {
    "doc": "最初のプロジェクト",
    "title": "目次",
    "content": ". | 📋 事前準備の確認 | 📁 Step 1: プロジェクトフォルダの作成と準備 . | 1.1 VSCodeを起動 | 1.2 新しいフォルダをVSCodeで開く . | 方法A: VSCodeから直接作成 | 方法B: エクスプローラーから開く | . | 1.3 VSCodeの画面構成を確認 | . | 💻 Step 2: VSCode統合ターミナルの活用 . | 2.1 ターミナルを開く | 2.2 ターミナルの確認 | . | 🚀 Step 3: Vibecodingプロジェクトの初期化 . | 3.1 プロジェクトの初期化コマンド | 3.2 対話型セットアップ | 3.3 初期化の完了 | . | 📝 Step 4: VSCodeで要件定義 . | 4.1 要件定義の開始 | 4.2 対話型要件定義 | 4.3 要件定義の完了とコード生成 | . | 🎨 Step 5: VSCodeでのコード確認と編集 . | 5.1 生成されたファイルを開く | 5.2 コードの確認 | 5.3 コードの編集 | . | ▶️ Step 6: アプリケーションの実行 . | 6.1 依存関係のインストール | 6.2 開発サーバーの起動 | 6.3 ブラウザでの確認 | 6.4 ライブリロード | . | 🐛 Step 7: VSCodeのデバッグ機能 . | 7.1 デバッグの設定 | 7.2 ブレークポイントの設定 | 7.3 デバッグ時の操作 | . | 🔀 Step 8: VSCodeのGit統合 . | 8.1 ソース管理を開く | 8.2 変更の確認 | 8.3 コミット | . | 📚 Step 9: VSCodeの便利な機能 . | 9.1 マルチカーソル | 9.2 エメット（Emmet） | 9.3 スニペット | 9.4 ファイル検索 | . | 🎯 まとめ | 🆘 トラブルシューティング . | ターミナルが文字化けする | npm startでエラーが出る | ポート3000が使用中 | . | 🚀 次のステップ | . ",
    "url": "/vibecoding-manual/getting-started/first-project/#%E7%9B%AE%E6%AC%A1",
    
    "relUrl": "/getting-started/first-project/#目次"
  },"2": {
    "doc": "最初のプロジェクト",
    "title": "📋 事前準備の確認",
    "content": "開始前に、以下が完了していることを確認してください： . ✅ Node.jsがインストール済み ✅ Gitがインストール済み ✅ VSCodeがインストール済み ✅ VSCode拡張機能がインストール済み ✅ gemini-cliとcodex-cliがインストール済み . ",
    "url": "/vibecoding-manual/getting-started/first-project/#-%E4%BA%8B%E5%89%8D%E6%BA%96%E5%82%99%E3%81%AE%E7%A2%BA%E8%AA%8D",
    
    "relUrl": "/getting-started/first-project/#-事前準備の確認"
  },"3": {
    "doc": "最初のプロジェクト",
    "title": "📁 Step 1: プロジェクトフォルダの作成と準備",
    "content": "1.1 VSCodeを起動 . | Windows: スタートメニューから「Visual Studio Code」を選択 | Mac: LaunchpadまたはApplicationsから「Visual Studio Code」を選択 | . 1.2 新しいフォルダをVSCodeで開く . 方法A: VSCodeから直接作成 . | VSCodeのメニューバーから： . | ファイル → フォルダーを開く（Windows） | File → Open Folder（Mac） | . | 任意の場所（例：ドキュメントフォルダ）を選択 | 新しいフォルダーボタンをクリック | フォルダ名を入力：my-vibecoding-project | フォルダーの選択をクリック | . 方法B: エクスプローラーから開く . | エクスプローラー（Windows）またはFinder（Mac）で新規フォルダを作成 | フォルダを右クリック | 「Codeで開く」を選択（VSCodeインストール時に追加されたメニュー） | . 1.3 VSCodeの画面構成を確認 . 開いたVSCodeの画面には以下の要素があります： . ┌─────────────────────────────────────────────┐ │ メニューバー（ファイル、編集、表示...） │ ├────┬────────────────────────────────────────┤ │ │ │ │ サ │ エディタエリア │ │ イ │ （ファイルの編集画面） │ │ ド │ │ │ バ │ │ │ ｜ │────────────────────────────────────────│ │ │ ターミナル（コマンド実行） │ └────┴────────────────────────────────────────┘ . ",
    "url": "/vibecoding-manual/getting-started/first-project/#-step-1-%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%83%95%E3%82%A9%E3%83%AB%E3%83%80%E3%81%AE%E4%BD%9C%E6%88%90%E3%81%A8%E6%BA%96%E5%82%99",
    
    "relUrl": "/getting-started/first-project/#-step-1-プロジェクトフォルダの作成と準備"
  },"4": {
    "doc": "最初のプロジェクト",
    "title": "💻 Step 2: VSCode統合ターミナルの活用",
    "content": "2.1 ターミナルを開く . 以下のいずれかの方法でターミナルを開きます： . | ショートカット: Ctrl+`（Windows）/ Cmd+`（Mac） | メニュー: 表示 → ターミナル | 上部メニュー: Terminal → New Terminal | . 2.2 ターミナルの確認 . ターミナルが開いたら、現在のディレクトリが正しいか確認： . # 現在のディレクトリを確認 pwd . 出力例： . C:\\Users\\YourName\\Documents\\my-vibecoding-project # Windows /Users/YourName/Documents/my-vibecoding-project # Mac . ",
    "url": "/vibecoding-manual/getting-started/first-project/#-step-2-vscode%E7%B5%B1%E5%90%88%E3%82%BF%E3%83%BC%E3%83%9F%E3%83%8A%E3%83%AB%E3%81%AE%E6%B4%BB%E7%94%A8",
    
    "relUrl": "/getting-started/first-project/#-step-2-vscode統合ターミナルの活用"
  },"5": {
    "doc": "最初のプロジェクト",
    "title": "🚀 Step 3: Vibecodingプロジェクトの初期化",
    "content": "3.1 プロジェクトの初期化コマンド . VSCodeのターミナルで以下を実行： . codex /init . 3.2 対話型セットアップ . ターミナル内で対話型のセットアップが始まります： . ? プロジェクト名を入力してください: my-first-app ? プロジェクトの説明を入力してください: VSCodeで作る最初のVibecodingアプリ ? 使用するフレームワークを選択してください: ❯ React Vue Angular Node.js (バックエンド) その他 . 入力のヒント： . | 矢印キー（↑↓）で選択 | Enterで決定 | 日本語入力も可能 | . 3.3 初期化の完了 . 初期化が完了すると、左側のエクスプローラーに新しいファイルが表示されます： . my-vibecoding-project/ ├── 📄 package.json ├── 📄 .gitignore ├── 📁 src/ └── 📄 README.md . ",
    "url": "/vibecoding-manual/getting-started/first-project/#-step-3-vibecoding%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E5%88%9D%E6%9C%9F%E5%8C%96",
    
    "relUrl": "/getting-started/first-project/#-step-3-vibecodingプロジェクトの初期化"
  },"6": {
    "doc": "最初のプロジェクト",
    "title": "📝 Step 4: VSCodeで要件定義",
    "content": "4.1 要件定義の開始 . ターミナルで以下のコマンドを実行： . codex requirements . 4.2 対話型要件定義 . AIアシスタントとの対話がターミナル内で進行します： . AI: どのようなアプリケーションを作成しますか？ あなた: タスク管理アプリを作りたいです AI: タスク管理アプリですね。以下の機能について確認します： 1. タスクの追加・削除 2. タスクの完了マーク 3. 優先度設定 4. カテゴリ分け 必要な機能を教えてください。 あなた: 1と2だけで、シンプルに作りたいです . 4.3 要件定義の完了とコード生成 . 要件定義が完了しました。 コードを生成中... ✅ src/App.js を生成しました ✅ src/components/TaskList.js を生成しました ✅ src/components/TaskItem.js を生成しました ✅ package.json を更新しました 生成が完了しました！ . ",
    "url": "/vibecoding-manual/getting-started/first-project/#-step-4-vscode%E3%81%A7%E8%A6%81%E4%BB%B6%E5%AE%9A%E7%BE%A9",
    
    "relUrl": "/getting-started/first-project/#-step-4-vscodeで要件定義"
  },"7": {
    "doc": "最初のプロジェクト",
    "title": "🎨 Step 5: VSCodeでのコード確認と編集",
    "content": "5.1 生成されたファイルを開く . | エクスプローラーパネル（左サイドバー）でファイルをクリック | または Ctrl+P（Mac: Cmd+P）でファイル名を入力して開く | . 5.2 コードの確認 . 生成されたコードがエディタに表示されます。VSCodeの機能： . | シンタックスハイライト: コードが色分けされて見やすい | IntelliSense: 自動補完が効く（.を打つと候補が出る） | エラー表示: 問題があれば赤い波線で表示 | ホバー情報: 変数や関数にマウスを乗せると説明が表示 | . 5.3 コードの編集 . 必要に応じてコードを編集： . | 編集したい箇所をクリック | 入力または削除 | Ctrl+S（Mac: Cmd+S）で保存 | 自動フォーマット: Prettierが自動で整形 | . ",
    "url": "/vibecoding-manual/getting-started/first-project/#-step-5-vscode%E3%81%A7%E3%81%AE%E3%82%B3%E3%83%BC%E3%83%89%E7%A2%BA%E8%AA%8D%E3%81%A8%E7%B7%A8%E9%9B%86",
    
    "relUrl": "/getting-started/first-project/#-step-5-vscodeでのコード確認と編集"
  },"8": {
    "doc": "最初のプロジェクト",
    "title": "▶️ Step 6: アプリケーションの実行",
    "content": "6.1 依存関係のインストール . ターミナルで実行： . npm install . 進捗がターミナルに表示されます： . added 234 packages, and audited 235 packages in 15s found 0 vulnerabilities . 6.2 開発サーバーの起動 . npm start . 6.3 ブラウザでの確認 . 起動メッセージ： . Compiled successfully! You can now view my-first-app in the browser. Local: http://localhost:3000 On Your Network: http://192.168.1.5:3000 Note that the development build is not optimized. To create a production build, use npm run build. | ブラウザが自動的に開きます | 開かない場合は http://localhost:3000 にアクセス | . 6.4 ライブリロード . VSCodeでコードを編集して保存すると： . | 自動的にコンパイル | ブラウザが自動更新 | 変更が即座に反映 | . ",
    "url": "/vibecoding-manual/getting-started/first-project/#%EF%B8%8F-step-6-%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E5%AE%9F%E8%A1%8C",
    
    "relUrl": "/getting-started/first-project/#️-step-6-アプリケーションの実行"
  },"9": {
    "doc": "最初のプロジェクト",
    "title": "🐛 Step 7: VSCodeのデバッグ機能",
    "content": "7.1 デバッグの設定 . | 左サイドバーのデバッグアイコンをクリック（虫のアイコン） | 「launch.jsonファイルを作成します」をクリック | 「Chrome」を選択 | 自動的に.vscode/launch.jsonが作成される | . 7.2 ブレークポイントの設定 . | コードの行番号の左側をクリック | 赤い点（ブレークポイント）が表示される | F5キーでデバッグ開始 | ブレークポイントで実行が停止 | . 7.3 デバッグ時の操作 . | F10: ステップオーバー（次の行へ） | F11: ステップイン（関数の中へ） | Shift+F11: ステップアウト（関数から出る） | F5: 続行 | . ",
    "url": "/vibecoding-manual/getting-started/first-project/#-step-7-vscode%E3%81%AE%E3%83%87%E3%83%90%E3%83%83%E3%82%B0%E6%A9%9F%E8%83%BD",
    
    "relUrl": "/getting-started/first-project/#-step-7-vscodeのデバッグ機能"
  },"10": {
    "doc": "最初のプロジェクト",
    "title": "🔀 Step 8: VSCodeのGit統合",
    "content": "8.1 ソース管理を開く . | 左サイドバーのソース管理アイコンをクリック（分岐アイコン） | または Ctrl+Shift+G（Mac: Cmd+Shift+G） | . 8.2 変更の確認 . | 変更タブに編集したファイルが表示 | ファイルをクリックで差分表示 | 緑：追加された行 | 赤：削除された行 | . 8.3 コミット . | 変更したいファイルの「+」をクリック（ステージング） | コミットメッセージを入力 | ✓（チェックマーク）をクリックしてコミット | . ",
    "url": "/vibecoding-manual/getting-started/first-project/#-step-8-vscode%E3%81%AEgit%E7%B5%B1%E5%90%88",
    
    "relUrl": "/getting-started/first-project/#-step-8-vscodeのgit統合"
  },"11": {
    "doc": "最初のプロジェクト",
    "title": "📚 Step 9: VSCodeの便利な機能",
    "content": "9.1 マルチカーソル . | Alt+クリック（Mac: Option+クリック）: 複数箇所を同時編集 | Ctrl+D（Mac: Cmd+D）: 同じ単語を順次選択 | . 9.2 エメット（Emmet） . HTMLを素早く記述： . div.container&gt;ul&gt;li*3 . Tabキーで展開： . &lt;div class=\"container\"&gt; &lt;ul&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; . 9.3 スニペット . rfc + Tabで React Functional Component のテンプレートが展開 . 9.4 ファイル検索 . | Ctrl+P（Mac: Cmd+P）: ファイル名で検索 | Ctrl+Shift+F（Mac: Cmd+Shift+F）: プロジェクト全体を検索 | . ",
    "url": "/vibecoding-manual/getting-started/first-project/#-step-9-vscode%E3%81%AE%E4%BE%BF%E5%88%A9%E3%81%AA%E6%A9%9F%E8%83%BD",
    
    "relUrl": "/getting-started/first-project/#-step-9-vscodeの便利な機能"
  },"12": {
    "doc": "最初のプロジェクト",
    "title": "🎯 まとめ",
    "content": "VSCodeを使ったVibecodingプロジェクトの基本的な流れ： . | ✅ VSCodeでプロジェクトフォルダを開く | ✅ 統合ターミナルでコマンド実行 | ✅ /initでプロジェクト初期化 | ✅ 要件定義でコード生成 | ✅ VSCodeで編集・デバッグ | ✅ Git統合でバージョン管理 | . ",
    "url": "/vibecoding-manual/getting-started/first-project/#-%E3%81%BE%E3%81%A8%E3%82%81",
    
    "relUrl": "/getting-started/first-project/#-まとめ"
  },"13": {
    "doc": "最初のプロジェクト",
    "title": "🆘 トラブルシューティング",
    "content": "ターミナルが文字化けする . 解決方法： . | ターミナルの設定を開く（歯車アイコン） | 「Select Default Profile」を選択 | PowerShell または Git Bash を選択 | . npm startでエラーが出る . 解決方法： . # node_modulesを削除して再インストール rm -rf node_modules package-lock.json npm install npm start . ポート3000が使用中 . 解決方法： . # 別のポートで起動 PORT=3001 npm start # Mac/Linux set PORT=3001 &amp;&amp; npm start # Windows . ",
    "url": "/vibecoding-manual/getting-started/first-project/#-%E3%83%88%E3%83%A9%E3%83%96%E3%83%AB%E3%82%B7%E3%83%A5%E3%83%BC%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0",
    
    "relUrl": "/getting-started/first-project/#-トラブルシューティング"
  },"14": {
    "doc": "最初のプロジェクト",
    "title": "🚀 次のステップ",
    "content": "基本的な開発フローを理解したら、以下に挑戦してみましょう： . | 🎨 UIのカスタマイズ | 🔧 新機能の追加 | 📱 レスポンシブデザイン | 🚀 本番環境へのデプロイ | . 🎉 おめでとうございます！ . VSCodeを使ったVibecodingプロジェクトの作成に成功しました。これで本格的な開発を始める準備が整いました！ . ",
    "url": "/vibecoding-manual/getting-started/first-project/#-%E6%AC%A1%E3%81%AE%E3%82%B9%E3%83%86%E3%83%83%E3%83%97",
    
    "relUrl": "/getting-started/first-project/#-次のステップ"
  },"15": {
    "doc": "最初のプロジェクト",
    "title": "最初のプロジェクト",
    "content": " ",
    "url": "/vibecoding-manual/getting-started/first-project/",
    
    "relUrl": "/getting-started/first-project/"
  },"16": {
    "doc": "環境構築",
    "title": "環境構築",
    "content": "Vibecodingを使い始めるための環境構築ガイドです。お使いのOSに応じて、必要なツールをインストールしていきます。 . ",
    "url": "/vibecoding-manual/getting-started/",
    
    "relUrl": "/getting-started/"
  },"17": {
    "doc": "環境構築",
    "title": "目次",
    "content": ". | 概要 | 必要なツール | セットアップの流れ | トラブルシューティング | . ",
    "url": "/vibecoding-manual/getting-started/#%E7%9B%AE%E6%AC%A1",
    
    "relUrl": "/getting-started/#目次"
  },"18": {
    "doc": "環境構築",
    "title": "概要",
    "content": "Vibecodingの開発環境を構築するには、以下のステップを順番に進めていきます： . | 前提条件の確認 - 必要なツールがインストールされているか確認 | OS別セットアップ - WindowsまたはMacの環境に応じた設定 | プロジェクト作成 - 最初のVibecodingプロジェクトを作成 | . ",
    "url": "/vibecoding-manual/getting-started/#%E6%A6%82%E8%A6%81",
    
    "relUrl": "/getting-started/#概要"
  },"19": {
    "doc": "環境構築",
    "title": "必要なツール",
    "content": ". | Node.js v16.0以上 | Git v2.0以上 | gemini-cli （Node.js経由でインストール） | codex-cli （Node.js経由でインストール） | . ",
    "url": "/vibecoding-manual/getting-started/#%E5%BF%85%E8%A6%81%E3%81%AA%E3%83%84%E3%83%BC%E3%83%AB",
    
    "relUrl": "/getting-started/#必要なツール"
  },"20": {
    "doc": "環境構築",
    "title": "セットアップの流れ",
    "content": "graph TD A[前提条件の確認] --&gt; B{OSの選択} B --&gt; C[Windows セットアップ] B --&gt; D[Mac セットアップ] C --&gt; E[CLIツールのインストール] D --&gt; E E --&gt; F[最初のプロジェクト作成] . ",
    "url": "/vibecoding-manual/getting-started/#%E3%82%BB%E3%83%83%E3%83%88%E3%82%A2%E3%83%83%E3%83%97%E3%81%AE%E6%B5%81%E3%82%8C",
    
    "relUrl": "/getting-started/#セットアップの流れ"
  },"21": {
    "doc": "環境構築",
    "title": "トラブルシューティング",
    "content": "環境構築で問題が発生した場合は、各ページの「トラブルシューティング」セクションを参照してください。 . よくある問題： . | Node.jsのバージョンが古い | npmの権限エラー | Gitの初期設定が未完了 | . 次のステップ: 前提条件の確認から始めましょう。 . ",
    "url": "/vibecoding-manual/getting-started/#%E3%83%88%E3%83%A9%E3%83%96%E3%83%AB%E3%82%B7%E3%83%A5%E3%83%BC%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0",
    
    "relUrl": "/getting-started/#トラブルシューティング"
  },"22": {
    "doc": "ホーム",
    "title": "Vibecoding スタートガイド",
    "content": "プログラミング初心者でも簡単に始められる、Vibecodingの完全ガイドです。 . 環境構築を始める GitHubで見る . ",
    "url": "/vibecoding-manual/#vibecoding-%E3%82%B9%E3%82%BF%E3%83%BC%E3%83%88%E3%82%AC%E3%82%A4%E3%83%89",
    
    "relUrl": "/#vibecoding-スタートガイド"
  },"23": {
    "doc": "ホーム",
    "title": "このガイドについて",
    "content": "Vibecodingは、AIの力を借りて効率的にコーディングを進めるための開発支援ツールです。このガイドでは、環境構築から最初のプロジェクト作成まで、ステップバイステップで解説します。 . 主な特徴 . | ✨ 対話型開発 - AIと対話しながら要件定義を進められます | 🚀 自動生成 - 要件に基づいてコードを自動生成します | 📚 初心者対応 - プログラミング知識が少なくても始められます | 🔧 簡単セットアップ - 必要なツールを順番にインストールするだけ | . ",
    "url": "/vibecoding-manual/#%E3%81%93%E3%81%AE%E3%82%AC%E3%82%A4%E3%83%89%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6",
    
    "relUrl": "/#このガイドについて"
  },"24": {
    "doc": "ホーム",
    "title": "クイックスタート",
    "content": "📋 前提条件の確認 . 開発を始める前に、以下のツールがインストールされているか確認してください： . | Node.js (v16.0以上) | Git (v2.0以上) | . # Node.jsのバージョン確認 node --version # Gitのバージョン確認 git --version . 🖥️ OS別セットアップ . お使いのOSに応じて、セットアップガイドをご覧ください： . - **Windows ユーザー** - [Windows セットアップガイド](/vibecoding-manual/getting-started/windows-setup/) - **Mac ユーザー** - [Mac セットアップガイド](/vibecoding-manual/getting-started/mac-setup/) 🎯 最初のプロジェクト . 環境構築が完了したら、最初のプロジェクト作成に進みましょう。 . ",
    "url": "/vibecoding-manual/#getting-started",
    
    "relUrl": "/#getting-started"
  },"25": {
    "doc": "ホーム",
    "title": "学習の流れ",
    "content": ". | 環境確認 - 必要なツールの確認 | 環境構築 - Node.jsとGitのインストール | CLIツール導入 - gemini-cliとcodex-cliのインストール | プロジェクト作成 - /initコマンドで開始 | . ",
    "url": "/vibecoding-manual/#%E5%AD%A6%E7%BF%92%E3%81%AE%E6%B5%81%E3%82%8C",
    
    "relUrl": "/#学習の流れ"
  },"26": {
    "doc": "ホーム",
    "title": "サポート",
    "content": "問題が発生した場合は、各ページのトラブルシューティングセクションを参照してください。 . コミュニティ . | GitHub Issues - バグ報告や質問 | Discussions - コミュニティでの議論 | . このドキュメントは継続的に更新されています。最新版はGitHubリポジトリでご確認ください。 . ",
    "url": "/vibecoding-manual/#%E3%82%B5%E3%83%9D%E3%83%BC%E3%83%88",
    
    "relUrl": "/#サポート"
  },"27": {
    "doc": "ホーム",
    "title": "ホーム",
    "content": " ",
    "url": "/vibecoding-manual/",
    
    "relUrl": "/"
  },"28": {
    "doc": "Mac セットアップ",
    "title": "🍎 Mac セットアップガイド",
    "content": "macOS環境でVibecoding開発環境を構築する手順を説明します。 . ",
    "url": "/vibecoding-manual/getting-started/mac-setup/#-mac-%E3%82%BB%E3%83%83%E3%83%88%E3%82%A2%E3%83%83%E3%83%97%E3%82%AC%E3%82%A4%E3%83%89",
    
    "relUrl": "/getting-started/mac-setup/#-mac-セットアップガイド"
  },"29": {
    "doc": "Mac セットアップ",
    "title": "🛠️ Step 1: Homebrew のインストール（推奨）",
    "content": "Homebrewは、Macでソフトウェアを簡単にインストールできるパッケージマネージャーです。 . 1.1 Homebrewのインストール . ターミナルを開いて以下のコマンドを実行： . /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" . インストール中にパスワードを求められたら、Macのログインパスワードを入力してください。 . 1.2 インストールの確認 . brew --version . ✅ バージョン番号が表示されれば成功です！ . ",
    "url": "/vibecoding-manual/getting-started/mac-setup/#%EF%B8%8F-step-1-homebrew-%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E6%8E%A8%E5%A5%A8",
    
    "relUrl": "/getting-started/mac-setup/#️-step-1-homebrew-のインストール推奨"
  },"30": {
    "doc": "Mac セットアップ",
    "title": "📦 Step 2: Node.js のインストール",
    "content": "方法A: Homebrew を使用（推奨） . # Node.jsとnpmをインストール brew install node # インストール確認 node --version npm --version . 方法B: 公式インストーラーを使用 . | Node.js 公式サイト にアクセス | 「LTS」バージョン（推奨版）をクリック | macOS用の .pkg ファイルをダウンロード | ダウンロードしたファイルをダブルクリック | インストーラーの指示に従って進める | インストール完了 | . インストール確認 . 新しいターミナルウィンドウを開いて： . node --version npm --version . ",
    "url": "/vibecoding-manual/getting-started/mac-setup/#-step-2-nodejs-%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB",
    
    "relUrl": "/getting-started/mac-setup/#-step-2-nodejs-のインストール"
  },"31": {
    "doc": "Mac セットアップ",
    "title": "🔧 Step 3: Git のインストールと設定",
    "content": "3.1 Git のインストール確認 . macOSには通常Gitがプリインストールされています： . git --version . もしインストールされていない場合は、以下のいずれかの方法でインストール： . 方法A: Xcode Command Line Tools（自動） . git --version . このコマンドを実行すると、自動的にインストールダイアログが表示されます。 . 方法B: Homebrew を使用 . brew install git . 3.2 Git の初期設定 . ユーザー情報を設定します（自分の情報に置き換えてください）： . git config --global user.name \"あなたの名前\" git config --global user.email \"your.email@example.com\" . 例： . git config --global user.name \"Taro Yamada\" git config --global user.email \"taro@example.com\" . 3.3 設定の確認 . git config --list . ",
    "url": "/vibecoding-manual/getting-started/mac-setup/#-step-3-git-%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%A8%E8%A8%AD%E5%AE%9A",
    
    "relUrl": "/getting-started/mac-setup/#-step-3-git-のインストールと設定"
  },"32": {
    "doc": "Mac セットアップ",
    "title": "🚀 Step 4: Vibecoding CLI ツールのインストール",
    "content": "4.1 gemini-cli のインストール . ターミナルで以下のコマンドを実行： . npm install -g @genkit-ai/cli . インストール確認： . genkit --version . 4.2 codex-cli のインストール . npm install -g @vibecoding/codex-cli . インストール確認： . codex --version . ⚠️ 権限エラーが出る場合の対処法 . npmのグローバルインストールで権限エラーが出る場合： . 解決方法1: npmのプレフィックスを変更 . # npmのディレクトリを作成 mkdir ~/.npm-global # npmの設定を変更 npm config set prefix '~/.npm-global' # パスを追加（zshの場合） echo 'export PATH=~/.npm-global/bin:$PATH' &gt;&gt; ~/.zshrc source ~/.zshrc # bashの場合 echo 'export PATH=~/.npm-global/bin:$PATH' &gt;&gt; ~/.bash_profile source ~/.bash_profile . その後、再度インストールコマンドを実行してください。 . ",
    "url": "/vibecoding-manual/getting-started/mac-setup/#-step-4-vibecoding-cli-%E3%83%84%E3%83%BC%E3%83%AB%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB",
    
    "relUrl": "/getting-started/mac-setup/#-step-4-vibecoding-cli-ツールのインストール"
  },"33": {
    "doc": "Mac セットアップ",
    "title": "🎨 Step 5: 開発環境の最終確認",
    "content": "すべてのツールが正しくインストールされているか確認しましょう： . # Node.js の確認 node --version # npm の確認 npm --version # Git の確認 git --version # gemini-cli の確認 genkit --version # codex-cli の確認 codex --version . すべてのコマンドでバージョン番号が表示されれば、環境構築は完了です！ . ",
    "url": "/vibecoding-manual/getting-started/mac-setup/#-step-5-%E9%96%8B%E7%99%BA%E7%92%B0%E5%A2%83%E3%81%AE%E6%9C%80%E7%B5%82%E7%A2%BA%E8%AA%8D",
    
    "relUrl": "/getting-started/mac-setup/#-step-5-開発環境の最終確認"
  },"34": {
    "doc": "Mac セットアップ",
    "title": "🆘 トラブルシューティング",
    "content": "command not found エラー . 原因: パスが通っていない . 解決方法: . | シェルの設定ファイルを確認： echo $SHELL # 使用中のシェルを確認 . | zshの場合： echo 'export PATH=\"/usr/local/bin:$PATH\"' &gt;&gt; ~/.zshrc source ~/.zshrc . | bashの場合： echo 'export PATH=\"/usr/local/bin:$PATH\"' &gt;&gt; ~/.bash_profile source ~/.bash_profile . | . Homebrew の警告メッセージ . 解決方法: . # Homebrewを最新版に更新 brew update # 問題を診断 brew doctor . 診断結果に従って修正を行ってください。 . macOS のセキュリティ警告 . 「開発元が未確認のため開けません」というエラーが出る場合： . 解決方法: . | システム環境設定 → セキュリティとプライバシー | 「一般」タブ | 「このまま開く」をクリック | . ",
    "url": "/vibecoding-manual/getting-started/mac-setup/#-%E3%83%88%E3%83%A9%E3%83%96%E3%83%AB%E3%82%B7%E3%83%A5%E3%83%BC%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0",
    
    "relUrl": "/getting-started/mac-setup/#-トラブルシューティング"
  },"35": {
    "doc": "Mac セットアップ",
    "title": "✅ セットアップ完了！",
    "content": "おめでとうございます！Mac環境でのVibecoding開発環境の構築が完了しました。 . 🎯 次のステップ . 環境構築が完了したら、最初のプロジェクトを作成してみましょう！ . 最初のプロジェクトを始める → ",
    "url": "/vibecoding-manual/getting-started/mac-setup/#-%E3%82%BB%E3%83%83%E3%83%88%E3%82%A2%E3%83%83%E3%83%97%E5%AE%8C%E4%BA%86",
    
    "relUrl": "/getting-started/mac-setup/#-セットアップ完了"
  },"36": {
    "doc": "Mac セットアップ",
    "title": "Mac セットアップ",
    "content": " ",
    "url": "/vibecoding-manual/getting-started/mac-setup/",
    
    "relUrl": "/getting-started/mac-setup/"
  },"37": {
    "doc": "前提条件の確認",
    "title": "📋 前提条件の確認",
    "content": "Vibecoding を使い始める前に、お使いのPCに必要なツールがインストールされているか確認しましょう。 . ",
    "url": "/vibecoding-manual/getting-started/prerequisites/#-%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6%E3%81%AE%E7%A2%BA%E8%AA%8D",
    
    "relUrl": "/getting-started/prerequisites/#-前提条件の確認"
  },"38": {
    "doc": "前提条件の確認",
    "title": "🔍 確認が必要なツール",
    "content": ". | Node.js (バージョン 16.0 以上) | Git (バージョン 2.0 以上) | . ",
    "url": "/vibecoding-manual/getting-started/prerequisites/#-%E7%A2%BA%E8%AA%8D%E3%81%8C%E5%BF%85%E8%A6%81%E3%81%AA%E3%83%84%E3%83%BC%E3%83%AB",
    
    "relUrl": "/getting-started/prerequisites/#-確認が必要なツール"
  },"39": {
    "doc": "前提条件の確認",
    "title": "📊 現在の環境を確認する",
    "content": "Node.js のバージョン確認 . ターミナル（コマンドプロンプト）を開いて、以下のコマンドを実行してください： . node --version . 期待される出力例： . v18.17.0 . ✅ 成功: v16.0.0 以上のバージョンが表示されればOKです ❌ 失敗: コマンドが認識されない、または古いバージョンの場合はインストールが必要です . Git のバージョン確認 . 同じくターミナルで以下のコマンドを実行します： . git --version . 期待される出力例： . git version 2.42.0 . ✅ 成功: 2.0.0 以上のバージョンが表示されればOKです ❌ 失敗: コマンドが認識されない場合はインストールが必要です . ",
    "url": "/vibecoding-manual/getting-started/prerequisites/#-%E7%8F%BE%E5%9C%A8%E3%81%AE%E7%92%B0%E5%A2%83%E3%82%92%E7%A2%BA%E8%AA%8D%E3%81%99%E3%82%8B",
    
    "relUrl": "/getting-started/prerequisites/#-現在の環境を確認する"
  },"40": {
    "doc": "前提条件の確認",
    "title": "🖥️ ターミナルの開き方",
    "content": "Windows の場合 . 以下のいずれかの方法でターミナルを開けます： . | コマンドプロンプト . | Windows キー + R を押す | cmd と入力して Enter | . | PowerShell (推奨) . | Windows キー + X を押す | 「Windows PowerShell」を選択 | . | Windows Terminal (Windows 11) . | Windows キー を押す | 「Terminal」と入力して Enter | . | . Mac の場合 . | ターミナル . | Command + Space を押す（Spotlight検索） | 「Terminal」または「ターミナル」と入力 | Enter キーを押す | . | または . | Finder を開く | アプリケーション → ユーティリティ → ターミナル | . | . ",
    "url": "/vibecoding-manual/getting-started/prerequisites/#%EF%B8%8F-%E3%82%BF%E3%83%BC%E3%83%9F%E3%83%8A%E3%83%AB%E3%81%AE%E9%96%8B%E3%81%8D%E6%96%B9",
    
    "relUrl": "/getting-started/prerequisites/#️-ターミナルの開き方"
  },"41": {
    "doc": "前提条件の確認",
    "title": "⚠️ トラブルシューティング",
    "content": "「コマンドが見つかりません」エラーが出る場合 . このエラーは、ツールがインストールされていないか、パスが通っていないことを示しています。 . 解決方法： . | お使いのOSに応じたセットアップガイドに進んでください | Windows セットアップ | Mac セットアップ | . バージョンが古い場合 . 既にインストール済みでもバージョンが古い場合は、アップデートが必要です。セットアップガイドでアップデート方法を説明しています。 . ",
    "url": "/vibecoding-manual/getting-started/prerequisites/#%EF%B8%8F-%E3%83%88%E3%83%A9%E3%83%96%E3%83%AB%E3%82%B7%E3%83%A5%E3%83%BC%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0",
    
    "relUrl": "/getting-started/prerequisites/#️-トラブルシューティング"
  },"42": {
    "doc": "前提条件の確認",
    "title": "📝 チェックリスト",
    "content": "インストール作業に進む前に、以下を確認してください： . | ターミナル（コマンドプロンプト）を開ける | Node.js のバージョンを確認した | Git のバージョンを確認した | 必要に応じてインストールまたはアップデートが必要か判断した | . ",
    "url": "/vibecoding-manual/getting-started/prerequisites/#-%E3%83%81%E3%82%A7%E3%83%83%E3%82%AF%E3%83%AA%E3%82%B9%E3%83%88",
    
    "relUrl": "/getting-started/prerequisites/#-チェックリスト"
  },"43": {
    "doc": "前提条件の確認",
    "title": "🎯 次のステップ",
    "content": "環境確認が完了したら、お使いのOSに応じてセットアップを進めましょう： . 🪟 Windows セットアップへ進む 🍎 Mac セットアップへ進む ",
    "url": "/vibecoding-manual/getting-started/prerequisites/#-%E6%AC%A1%E3%81%AE%E3%82%B9%E3%83%86%E3%83%83%E3%83%97",
    
    "relUrl": "/getting-started/prerequisites/#-次のステップ"
  },"44": {
    "doc": "前提条件の確認",
    "title": "前提条件の確認",
    "content": " ",
    "url": "/vibecoding-manual/getting-started/prerequisites/",
    
    "relUrl": "/getting-started/prerequisites/"
  },"45": {
    "doc": "VSCode セットアップ",
    "title": "Visual Studio Code セットアップ",
    "content": "Vibecodingの開発に最適なエディタ、Visual Studio Code（VSCode）のインストールと設定を行います。 . ",
    "url": "/vibecoding-manual/getting-started/vscode-setup/#visual-studio-code-%E3%82%BB%E3%83%83%E3%83%88%E3%82%A2%E3%83%83%E3%83%97",
    
    "relUrl": "/getting-started/vscode-setup/#visual-studio-code-セットアップ"
  },"46": {
    "doc": "VSCode セットアップ",
    "title": "目次",
    "content": ". | 📥 VSCodeのインストール . | Windows | Mac | 起動確認 | . | 🌐 日本語化 . | 手順 | . | 🧩 必須拡張機能のインストール . | インストール方法 | 必須拡張機能リスト . | 1. ESLint | 2. Prettier - Code formatter | 3. Node.js Modules IntelliSense | 4. npm Intellisense | 5. Path Intellisense | 6. GitLens | 7. JavaScript (ES6) code snippets | 8. Live Server | . | 一括インストール（コマンド） | . | ⚙️ VSCodeの推奨設定 . | 設定ファイルの作成 | . | 🎨 テーマとアイコン（オプション） . | 人気のテーマ . | ダークテーマ | ライトテーマ | . | アイコンテーマ | . | 🔧 VSCodeの基本操作 . | よく使うショートカット | 統合ターミナルの使い方 | . | ✅ セットアップ完了の確認 | 🎯 次のステップ | . ",
    "url": "/vibecoding-manual/getting-started/vscode-setup/#%E7%9B%AE%E6%AC%A1",
    
    "relUrl": "/getting-started/vscode-setup/#目次"
  },"47": {
    "doc": "VSCode セットアップ",
    "title": "📥 VSCodeのインストール",
    "content": "Windows . | VSCode公式サイトにアクセス | 「Download for Windows」をクリック | ダウンロードした VSCodeUserSetup-x64-X.XX.X.exe を実行 | インストーラーの指示に従って進む . | ✅ 「PATHへの追加」にチェック（重要） | ✅ 「エクスプローラーのコンテキストメニューに追加」にチェック | . | 「インストール」をクリック | PCを再起動 | . Mac . | VSCode公式サイトにアクセス | 「Download for Mac」をクリック | ダウンロードした VSCode-darwin-universal.zip を解凍 | Visual Studio Code.app をアプリケーションフォルダにドラッグ | Launchpadから起動 | . 起動確認 . # ターミナルでVSCodeが起動できるか確認 code --version . ",
    "url": "/vibecoding-manual/getting-started/vscode-setup/#-vscode%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB",
    
    "relUrl": "/getting-started/vscode-setup/#-vscodeのインストール"
  },"48": {
    "doc": "VSCode セットアップ",
    "title": "🌐 日本語化",
    "content": "VSCodeを日本語で使いたい場合は、以下の手順で日本語パックをインストールします。 . 手順 . | VSCodeを起動 | 左側のアクティビティバーから「Extensions」アイコンをクリック（または Ctrl+Shift+X / Cmd+Shift+X） | 検索ボックスに「Japanese」と入力 | 「Japanese Language Pack for Visual Studio Code」を選択 | 「Install」をクリック | インストール完了後、右下の「Change Language and Restart」をクリック | VSCodeが再起動し、日本語表示になります | . ",
    "url": "/vibecoding-manual/getting-started/vscode-setup/#-%E6%97%A5%E6%9C%AC%E8%AA%9E%E5%8C%96",
    
    "relUrl": "/getting-started/vscode-setup/#-日本語化"
  },"49": {
    "doc": "VSCode セットアップ",
    "title": "🧩 必須拡張機能のインストール",
    "content": "Vibecoding開発に必要な拡張機能をインストールします。 . インストール方法 . | VSCodeの拡張機能タブを開く（Ctrl+Shift+X / Cmd+Shift+X） | 以下の拡張機能を検索してインストール | . 必須拡張機能リスト . 1. ESLint . | 用途: JavaScriptのコード品質チェック | 検索: dbaeumer.vscode-eslint | コードの問題をリアルタイムで検出 | . 2. Prettier - Code formatter . | 用途: コード自動整形 | 検索: esbenp.prettier-vscode | 保存時に自動でコードを整形 | . 3. Node.js Modules IntelliSense . | 用途: Node.jsモジュールの自動補完 | 検索: leizongmin.node-module-intellisense | requireやimport文で自動補完 | . 4. npm Intellisense . | 用途: npmパッケージの自動補完 | 検索: christian-kohler.npm-intellisense | package.jsonの依存関係を認識 | . 5. Path Intellisense . | 用途: ファイルパスの自動補完 | 検索: christian-kohler.path-intellisense | ファイルパスの入力を支援 | . 6. GitLens . | 用途: Git統合の強化 | 検索: eamodio.gitlens | コードの変更履歴を可視化 | . 7. JavaScript (ES6) code snippets . | 用途: ES6スニペット | 検索: xabikos.javascriptsnippets | よく使うコードパターンを簡単入力 | . 8. Live Server . | 用途: ローカルサーバー起動 | 検索: ritwickdey.liveserver | HTMLファイルをライブプレビュー | . 一括インストール（コマンド） . VSCodeのターミナルで以下のコマンドを実行すると、一括でインストールできます： . # Windows (PowerShell) / Mac (Terminal) code --install-extension dbaeumer.vscode-eslint code --install-extension esbenp.prettier-vscode code --install-extension leizongmin.node-module-intellisense code --install-extension christian-kohler.npm-intellisense code --install-extension christian-kohler.path-intellisense code --install-extension eamodio.gitlens code --install-extension xabikos.javascriptsnippets code --install-extension ritwickdey.liveserver . ",
    "url": "/vibecoding-manual/getting-started/vscode-setup/#-%E5%BF%85%E9%A0%88%E6%8B%A1%E5%BC%B5%E6%A9%9F%E8%83%BD%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB",
    
    "relUrl": "/getting-started/vscode-setup/#-必須拡張機能のインストール"
  },"50": {
    "doc": "VSCode セットアップ",
    "title": "⚙️ VSCodeの推奨設定",
    "content": "設定ファイルの作成 . プロジェクトごとに最適な設定を行うため、.vscode/settings.jsonを作成します。 . | VSCodeでプロジェクトフォルダを開く | .vscodeフォルダを作成 | settings.jsonファイルを作成 | 以下の内容を貼り付け： | . { // エディタ設定 \"editor.fontSize\": 14, \"editor.tabSize\": 2, \"editor.wordWrap\": \"on\", \"editor.minimap.enabled\": true, \"editor.formatOnSave\": true, \"editor.codeActionsOnSave\": { \"source.fixAll.eslint\": true }, // ファイル設定 \"files.autoSave\": \"afterDelay\", \"files.autoSaveDelay\": 1000, \"files.exclude\": { \"**/node_modules\": true, \"**/.git\": true }, // Prettier設定 \"prettier.singleQuote\": true, \"prettier.semi\": true, \"prettier.tabWidth\": 2, // ターミナル設定 \"terminal.integrated.fontSize\": 14, \"terminal.integrated.defaultProfile.windows\": \"PowerShell\", \"terminal.integrated.defaultProfile.osx\": \"zsh\", // Git設定 \"git.autofetch\": true, \"git.confirmSync\": false } . ",
    "url": "/vibecoding-manual/getting-started/vscode-setup/#%EF%B8%8F-vscode%E3%81%AE%E6%8E%A8%E5%A5%A8%E8%A8%AD%E5%AE%9A",
    
    "relUrl": "/getting-started/vscode-setup/#️-vscodeの推奨設定"
  },"51": {
    "doc": "VSCode セットアップ",
    "title": "🎨 テーマとアイコン（オプション）",
    "content": "人気のテーマ . 見やすいテーマを選ぶことで、長時間の作業でも目が疲れにくくなります。 . ダークテーマ . | One Dark Pro: zhuangtongfa.material-theme | Dracula Official: dracula-theme.theme-dracula | Tokyo Night: enkia.tokyo-night | . ライトテーマ . | GitHub Light Theme: github.github-vscode-theme | Atom One Light: akamud.vscode-theme-onelight | . アイコンテーマ . ファイルアイコンを見やすくします： . | Material Icon Theme: pkief.material-icon-theme | VSCode Icons: vscode-icons-team.vscode-icons | . ",
    "url": "/vibecoding-manual/getting-started/vscode-setup/#-%E3%83%86%E3%83%BC%E3%83%9E%E3%81%A8%E3%82%A2%E3%82%A4%E3%82%B3%E3%83%B3%E3%82%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3",
    
    "relUrl": "/getting-started/vscode-setup/#-テーマとアイコンオプション"
  },"52": {
    "doc": "VSCode セットアップ",
    "title": "🔧 VSCodeの基本操作",
    "content": "よく使うショートカット . | 操作 | Windows | Mac | . | コマンドパレット | Ctrl+Shift+P | Cmd+Shift+P | . | ファイル検索 | Ctrl+P | Cmd+P | . | 統合ターミナル | Ctrl+ | Cmd+`` |   | . | サイドバー切替 | Ctrl+B | Cmd+B | . | ファイル保存 | Ctrl+S | Cmd+S | . | すべて保存 | Ctrl+K S | Cmd+K S | . | 検索 | Ctrl+F | Cmd+F | . | 置換 | Ctrl+H | Cmd+H | . | コメント切替 | Ctrl+/ | Cmd+/ | . | 行の複製 | Shift+Alt+↓ | Shift+Option+↓ | . 統合ターミナルの使い方 . | Ctrl+` (Mac: Cmd+`) でターミナルを開く | 複数ターミナルの管理： . | 新規ターミナル: Ctrl+Shift+` | ターミナル切替: Ctrl+PageUp/PageDown | . | ターミナルの種類を選択： . | Windows: PowerShell, Command Prompt, Git Bash | Mac: zsh, bash | . | . ",
    "url": "/vibecoding-manual/getting-started/vscode-setup/#-vscode%E3%81%AE%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C",
    
    "relUrl": "/getting-started/vscode-setup/#-vscodeの基本操作"
  },"53": {
    "doc": "VSCode セットアップ",
    "title": "✅ セットアップ完了の確認",
    "content": "以下のチェックリストで、VSCodeの準備が整っているか確認しましょう： . | VSCodeが起動する | 日本語表示になっている（希望者のみ） | 必須拡張機能がインストール済み | 統合ターミナルが開ける | codeコマンドがターミナルで使える | . ",
    "url": "/vibecoding-manual/getting-started/vscode-setup/#-%E3%82%BB%E3%83%83%E3%83%88%E3%82%A2%E3%83%83%E3%83%97%E5%AE%8C%E4%BA%86%E3%81%AE%E7%A2%BA%E8%AA%8D",
    
    "relUrl": "/getting-started/vscode-setup/#-セットアップ完了の確認"
  },"54": {
    "doc": "VSCode セットアップ",
    "title": "🎯 次のステップ",
    "content": "VSCodeの準備ができたら、最初のプロジェクト作成に進みましょう！ . 💡 ヒント . VSCodeの設定は後から変更できます。まずは基本設定で始めて、慣れてきたら自分好みにカスタマイズしていきましょう。 . ",
    "url": "/vibecoding-manual/getting-started/vscode-setup/#-%E6%AC%A1%E3%81%AE%E3%82%B9%E3%83%86%E3%83%83%E3%83%97",
    
    "relUrl": "/getting-started/vscode-setup/#-次のステップ"
  },"55": {
    "doc": "VSCode セットアップ",
    "title": "VSCode セットアップ",
    "content": " ",
    "url": "/vibecoding-manual/getting-started/vscode-setup/",
    
    "relUrl": "/getting-started/vscode-setup/"
  },"56": {
    "doc": "Windows セットアップ",
    "title": "🪟 Windows セットアップガイド",
    "content": "Windows環境でVibecoding開発環境を構築する手順を説明します。 . ",
    "url": "/vibecoding-manual/getting-started/windows-setup/#-windows-%E3%82%BB%E3%83%83%E3%83%88%E3%82%A2%E3%83%83%E3%83%97%E3%82%AC%E3%82%A4%E3%83%89",
    
    "relUrl": "/getting-started/windows-setup/#-windows-セットアップガイド"
  },"57": {
    "doc": "Windows セットアップ",
    "title": "📦 Step 1: Node.js のインストール",
    "content": "1.1 インストーラーのダウンロード . | Node.js 公式サイト にアクセス | 「LTS」バージョン（推奨版）をクリック | ダウンロードが自動的に開始されます | . 💡 LTS版を選ぶ理由: 長期サポート版で安定性が高く、初心者に最適です . 1.2 インストール手順 . | ダウンロードした node-vXX.XX.X-x64.msi をダブルクリック | インストーラーが起動したら「Next」をクリック | ライセンス同意画面で「I accept…」にチェックを入れて「Next」 | インストール先はデフォルトのままで「Next」 | 重要: 「Automatically install the necessary tools…」にチェックを入れる | 「Install」をクリック | 管理者権限を求められたら「はい」を選択 | インストール完了後、「Finish」をクリック | . 1.3 インストールの確認 . PowerShell または コマンドプロンプトを新しく開いて以下を実行： . node --version npm --version . ✅ バージョン番号が表示されれば成功です！ . ",
    "url": "/vibecoding-manual/getting-started/windows-setup/#-step-1-nodejs-%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB",
    
    "relUrl": "/getting-started/windows-setup/#-step-1-nodejs-のインストール"
  },"58": {
    "doc": "Windows セットアップ",
    "title": "🔧 Step 2: Git のインストール",
    "content": "2.1 Git for Windows のダウンロード . | Git for Windows にアクセス | 「Download」ボタンをクリック | ダウンロードが開始されます | . 2.2 インストール手順 . | ダウンロードした Git-X.XX.X-64-bit.exe をダブルクリック | インストーラーが起動したら「Next」をクリック | インストール先はデフォルトのままで「Next」 | コンポーネント選択画面： . | ✅ 「Git Bash Here」にチェック | ✅ 「Git GUI Here」にチェック | 「Next」をクリック | . | デフォルトエディタの選択： . | 初心者は「Use Notepad as Git’s default editor」を選択 | 「Next」をクリック | . | 残りの設定はすべてデフォルトのまま「Next」を連続クリック | 「Install」をクリック | 「Finish」をクリック | . 2.3 Git の初期設定 . PowerShell を開いて以下のコマンドを実行（自分の情報に置き換えてください）： . git config --global user.name \"あなたの名前\" git config --global user.email \"your.email@example.com\" . 例： . git config --global user.name \"Taro Yamada\" git config --global user.email \"taro@example.com\" . 2.4 設定の確認 . git config --list . 自分の名前とメールアドレスが表示されれば成功です！ . ",
    "url": "/vibecoding-manual/getting-started/windows-setup/#-step-2-git-%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB",
    
    "relUrl": "/getting-started/windows-setup/#-step-2-git-のインストール"
  },"59": {
    "doc": "Windows セットアップ",
    "title": "🚀 Step 3: Vibecoding CLI ツールのインストール",
    "content": "3.1 gemini-cli のインストール . PowerShell で以下のコマンドを実行： . npm install -g @genkit-ai/cli . インストール確認： . genkit --version . 3.2 codex-cli のインストール . npm install -g @vibecoding/codex-cli . インストール確認： . codex --version . ⚠️ 権限エラーが出る場合: PowerShellを管理者として実行してから再度試してください . | Windowsキーを右クリック | 「Windows PowerShell (管理者)」を選択 | . ",
    "url": "/vibecoding-manual/getting-started/windows-setup/#-step-3-vibecoding-cli-%E3%83%84%E3%83%BC%E3%83%AB%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB",
    
    "relUrl": "/getting-started/windows-setup/#-step-3-vibecoding-cli-ツールのインストール"
  },"60": {
    "doc": "Windows セットアップ",
    "title": "🎨 Step 4: 開発環境の最終確認",
    "content": "すべてのツールが正しくインストールされているか確認しましょう： . # Node.js の確認 node --version # npm の確認 npm --version # Git の確認 git --version # gemini-cli の確認 genkit --version # codex-cli の確認 codex --version . すべてのコマンドでバージョン番号が表示されれば、環境構築は完了です！ . ",
    "url": "/vibecoding-manual/getting-started/windows-setup/#-step-4-%E9%96%8B%E7%99%BA%E7%92%B0%E5%A2%83%E3%81%AE%E6%9C%80%E7%B5%82%E7%A2%BA%E8%AA%8D",
    
    "relUrl": "/getting-started/windows-setup/#-step-4-開発環境の最終確認"
  },"61": {
    "doc": "Windows セットアップ",
    "title": "🆘 トラブルシューティング",
    "content": "npm コマンドが認識されない . 解決方法： . | PowerShellを再起動 | それでもダメな場合は、PCを再起動 | 環境変数PATHにNode.jsのパスが追加されているか確認 | . 権限エラー (EACCES/EPERM) . 解決方法： PowerShellを管理者権限で実行： . | Windowsキーを右クリック | 「Windows PowerShell (管理者)」を選択 | コマンドを再実行 | . ウイルス対策ソフトの警告 . 一部のウイルス対策ソフトはnpmパッケージのインストールを妨げることがあります。 . 解決方法： . | 一時的にリアルタイム保護を無効化 | インストールを実行 | インストール後、保護を再度有効化 | . ",
    "url": "/vibecoding-manual/getting-started/windows-setup/#-%E3%83%88%E3%83%A9%E3%83%96%E3%83%AB%E3%82%B7%E3%83%A5%E3%83%BC%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0",
    
    "relUrl": "/getting-started/windows-setup/#-トラブルシューティング"
  },"62": {
    "doc": "Windows セットアップ",
    "title": "✅ セットアップ完了！",
    "content": "おめでとうございます！Windows環境でのVibecoding開発環境の構築が完了しました。 . 🎯 次のステップ . 環境構築が完了したら、最初のプロジェクトを作成してみましょう！ . 最初のプロジェクトを始める → ",
    "url": "/vibecoding-manual/getting-started/windows-setup/#-%E3%82%BB%E3%83%83%E3%83%88%E3%82%A2%E3%83%83%E3%83%97%E5%AE%8C%E4%BA%86",
    
    "relUrl": "/getting-started/windows-setup/#-セットアップ完了"
  },"63": {
    "doc": "Windows セットアップ",
    "title": "Windows セットアップ",
    "content": " ",
    "url": "/vibecoding-manual/getting-started/windows-setup/",
    
    "relUrl": "/getting-started/windows-setup/"
  }
}
